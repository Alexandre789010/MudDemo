
@inject IStringLocalizer<LanguageSelector> L

<MudTooltip Text="@CurrentLanguage">
    <MudMenu Icon="@Icons.Material.Outlined.Translate" Color="Color.Default" Direction="Direction.Bottom" OffsetY="true"
        Dense="true">
        @foreach (var language in LocalizationConstants.SupportedLanguages)
        {
            if (language.Code == CurrentLanguage)
            {
                <MudMenuItem style="background:var(--mud-palette-primary); color:white">@L[language.DisplayName]</MudMenuItem>
            }
            else
            {
                <MudMenuItem OnClick="(()=> ChangeLanguageAsync(language.Code))">@L[language.DisplayName]</MudMenuItem>
            }
        }
    </MudMenu>
</MudTooltip>

@code {
    public string? CurrentLanguage { get; set; } = "en-US";
    [Inject] private ILocalStorageService _localStorage { get; set; } = default!;
    [Inject] private NavigationManager _navigation { get; set; }=default!;
    protected override async Task OnInitializedAsync()
    {
        var languageCode = await _localStorage.GetItemAsync<string>("CurrentLanguage");
        if (languageCode != null)
        {
            CurrentLanguage = languageCode;
        }
        else
        {
            CurrentLanguage = "en-US";
        }

    }
    private async Task ChangeLanguageAsync(string languageCode)
    {
        CurrentLanguage = languageCode;
        await _localStorage.SetItemAsStringAsync("CurrentLanguage", languageCode);
        _navigation.NavigateTo(_navigation.Uri, forceLoad: true);
    }
}